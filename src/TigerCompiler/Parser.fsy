%{

open System
open Tiger

module A = Absyn
module S = Symbol

%}

// The start token becomes a parser function in the compiled code:
%start start

%token EOF
%token <System.String> ID
%token <System.Int32> INT
%token <System.String> STRING

%token COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE DOT
%token PLUS MINUS UMINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR
%token ASSIGN
%token ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
%token BREAK NIL
%token FUNCTION VAR TYPE

%type <Tiger.Absyn.Exp> start

%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%


start: exp EOF { $1 }

exp:
    | lvalue    { A.VarExp($1) }
    | NIL       { A.NilExp }
    | unitexp   { $1 }
    | INT       { A.IntExp($1) }
    | STRING    { A.StringExp($1, parseState.InputStartPosition(1)) }
    | MINUS exp     %prec UMINUS 
        { A.OpExp(left = A.IntExp(0), oper = A.MinusOp, right = $2, pos = parseState.InputStartPosition(1)) }
    | funcall   { $1 }
    | arith_exp { $1 }
    | comp_exp  { $1 }
    | bool_exp  { $1 }
    | record_create  { $1 }
    | array_create   { $1 }
    | lvalue ASSIGN exp
        { A.AssignExp(var=$1, exp=$3, pos=parseState.InputStartPosition(1))}
    | IF exp THEN exp ELSE exp
        { A.IfExp($2, $4, Some($6), parseState.InputStartPosition(1)) }
    | IF exp THEN exp
        { A.IfExp($2, $4, None, parseState.InputStartPosition(1)) }
    | WHILE exp DO exp
        { A.WhileExp($2, $4, parseState.InputStartPosition(1)) }
    | FOR ID ASSIGN exp TO exp DO exp
        { A.ForExp(var=(S.symbol $2), escape=ref true, lo=$4, hi=$6, body=$8, pos=parseState.InputStartPosition(1)) }
    | BREAK
        { A.BreakExp(parseState.InputStartPosition(1)) }
    | LET decs IN expseq END 
        { A.LetExp(decs=$2, body=A.SeqExp($4), pos=parseState.InputStartPosition(1)) }
    | LPAREN expseq RPAREN
        { A.SeqExp($2) }

decs:
    |          { [] }
    | decs dec { $1 @ [$2] }

dec:
    | tydeclist  { A.TypeDec($1) }
    | vardec     { $1 }
    | fundeclist { A.FunctionDec($1) }

tydeclist:
    | tydec           { [$1] }
    | tydeclist tydec { $1 @ [$2] }

tydec: 
    | TYPE ID EQ ty
        { ((S.symbol $2), $4, parseState.InputStartPosition(1)) }

ty:
    | ID                      { A.NameTy((S.symbol $1), parseState.InputStartPosition(1)) }
    | LBRACE tyfields RBRACE  { A.RecordTy($2) }
    | ARRAY OF ID             { A.ArrayTy((S.symbol $3), parseState.InputStartPosition(1)) }

tyfield: 
    | ID COLON ID
        { {A.Field.name=(S.symbol $1);
           A.Field.escape=(ref true);
           A.Field.typ=(S.symbol $3);
           A.Field.pos=parseState.InputStartPosition(1)} }

tyfields:
    |                     { [] }
    | tyfields_nonempty   { $1 }

tyfields_nonempty:
    | tyfield                 { [$1] }
    | tyfields COMMA tyfield  { $1 @ [$3] }

vardec:
    | VAR ID ASSIGN exp
        { A.VarDec(name=(S.symbol $2), escape=(ref true), typ=None, init=$4, pos=parseState.InputStartPosition(1)) }
    | VAR ID COLON ID ASSIGN exp
        { A.VarDec(name=(S.symbol $2), escape=(ref true), 
                     typ=Some(((S.symbol $4), parseState.InputStartPosition(4))),
                     init=$6, pos=parseState.InputStartPosition(1)) }

fundeclist:
    | fundec              { [$1] }
    | fundeclist fundec   { $1 @ [$2] }

fundec:
    | FUNCTION ID LPAREN tyfields RPAREN EQ exp
        { {A.FunDec.name=(S.symbol $2); params'=$4;
           result=None;
           body=$7; pos=parseState.InputStartPosition(1)} }
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp 
        { {A.FunDec.name=(S.symbol $2); params'=$4;
           result=Some ((S.symbol $7), parseState.InputStartPosition(7));
           body=$9; pos=parseState.InputStartPosition(1)} }

record_create:
    | ID LBRACE record_create_list RBRACE
        { A.RecordExp (fields=$3, typ=(S.symbol $1), pos=parseState.InputStartPosition(1)) }

record_create_list:
    |                             { [] }
    | record_create_list_nonempty { $1 }

record_create_list_nonempty:
    | record_create_field
        { [$1] }
    | record_create_list_nonempty COMMA record_create_field
        { $1 @ [$3] }

record_create_field: 
    | ID EQ exp
        { ((S.symbol $1), $3, parseState.InputStartPosition(1)) }

array_create:
    | ID LBRACK exp RBRACK OF exp 
        { A.ArrayExp (typ=(S.symbol $1), size=$3, init=$6, pos=parseState.InputStartPosition(1)) }

expseq:
    | exp                     { [($1, parseState.InputStartPosition(1))] }
    | expseq SEMICOLON exp    { $1 @ [($3, parseState.InputStartPosition(3))] }

unitexp: LPAREN RPAREN { A.NilExp }

funcall:
    | ID LPAREN explist RPAREN
        { A.CallExp (func=(S.symbol $1), args=$3, pos=parseState.InputStartPosition(1)) }

explist:
    |                     { [] }
    | explist_nonempty    { $1 }

explist_nonempty:
    | exp                 { [$1] }
    | explist COMMA exp   { $1 @ [$3] }

arith_exp:
    | exp PLUS exp   { A.OpExp (left=$1, oper=A.PlusOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp MINUS exp  { A.OpExp (left=$1, oper=A.MinusOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp TIMES exp  { A.OpExp (left=$1, oper=A.TimesOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp DIVIDE exp { A.OpExp (left=$1, oper=A.DivideOp, right=$3, pos=parseState.InputStartPosition(1)) }

comp_exp:
    | exp EQ exp   {A.OpExp (left=$1, oper=A.EqOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp NEQ exp  {A.OpExp (left=$1, oper=A.NeqOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp LT exp   {A.OpExp (left=$1, oper=A.LtOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp LE exp   {A.OpExp (left=$1, oper=A.LeOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp GT exp   {A.OpExp (left=$1, oper=A.GtOp, right=$3, pos=parseState.InputStartPosition(1)) }
    | exp GE exp   {A.OpExp (left=$1, oper=A.GeOp, right=$3, pos=parseState.InputStartPosition(1)) }

bool_exp:
    | exp AND exp { A.IfExp (test=$1, then'=$3, else'=Some(A.IntExp(0)), pos=parseState.InputStartPosition(1)) }
    | exp OR exp  { A.IfExp (test=$1, then'=A.IntExp(1), else'=Some($3), pos=parseState.InputStartPosition(1)) }

lvalue:
    | ID
        { A.SimpleVar((S.symbol $1), parseState.InputStartPosition(1)) }
    | ID LBRACK exp RBRACK
        { A.SubscriptVar(A.SimpleVar((S.symbol $1), parseState.InputStartPosition(1)), $3, parseState.InputStartPosition(3)) }
    | lvalue LBRACK exp RBRACK // (* redundant rule to disambiguate with array-creation-expression *)
        { A.SubscriptVar($1, $3, parseState.InputStartPosition(1)) }
    | lvalue DOT ID
        { A.FieldVar($1, (S.symbol $3), parseState.InputStartPosition(1)) }
