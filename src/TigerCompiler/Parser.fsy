%{

open System
open Tiger

%}

// The start token becomes a parser function in the compiled code:
%start start

%token EOF
%token <System.String> ID
%token <System.Int32> INT
%token <System.String> STRING

%token COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE DOT
%token PLUS MINUS UMINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR
%token ASSIGN
%token ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF
%token BREAK NIL
%token FUNCTION VAR TYPE

%type <Tiger.Ast.Exp> start

%nonassoc ASSIGN
%left AND OR
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%


start: exp EOF { $1 }

exp:
    | lvalue 
        { Ast.VarExp($1) }
    | NIL 
        { Ast.NilExp }
    | unitexp { $1 }
    | INT 
        { Ast.IntExp($1) }
    | STRING 
        { Ast.StringExp($1, parseState.InputStartPosition(1)) }
    | lvalue ASSIGN exp
        { Ast.AssignExp(var=$1, exp=$3, pos=parseState.InputStartPosition(1))}
    | IF exp THEN exp ELSE exp
        { Ast.IfExp($2, $4, Some($6), parseState.InputStartPosition(1)) }
    | IF exp THEN exp
        { Ast.IfExp($2, $4, None, parseState.InputStartPosition(1)) }
    | WHILE exp DO exp
        { Ast.WhileExp($2, $4, parseState.InputStartPosition(1)) }
    | FOR ID ASSIGN exp TO exp DO exp
        { Ast.ForExp(var=$2, escape=ref true, lo=$4, hi=$6, body=$8, pos=parseState.InputStartPosition(1)) }
    | BREAK
        { Ast.BreakExp(parseState.InputStartPosition(1)) }
    //| LET decs IN expseq END             (A.LetExp {decs=decs, body=A.SeqExp expseq, pos=LETleft})
    | LPAREN expseq RPAREN
        { Ast.SeqExp($2) }

expseq:
  | exp
    { [($1, parseState.InputStartPosition(1))] }
  | expseq SEMICOLON exp
    { $1 @ [($3, parseState.InputStartPosition(3))] }

unitexp: LPAREN RPAREN { Ast.NilExp }

lvalue:
  | ID
    { Ast.SimpleVar($1, parseState.InputStartPosition(1)) }
  | ID LBRACK exp RBRACK
    { Ast.SubscriptVar(Ast.SimpleVar($1, parseState.InputStartPosition(1)), $3, parseState.InputStartPosition(3)) }
  | lvalue LBRACK exp RBRACK // (* redundant rule to disambiguate with array-creation-expression *)
    { Ast.SubscriptVar($1, $3, parseState.InputStartPosition(1)) }
  | lvalue DOT ID
    { Ast.FieldVar($1, $3, parseState.InputStartPosition(1)) }